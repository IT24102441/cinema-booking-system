package com.example.secrud.controller;

import com.example.secrud.models.Category;
import com.example.secrud.models.Movie;
import com.example.secrud.services.CategoryService;
import com.example.secrud.services.MovieService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import java.net.URI;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/admin/movies")
@Validated
public class MovieController {

    @Autowired
    private MovieService movieService;

    @Autowired
    private CategoryService categoryService;

    // Endpoint to get all movies (JSON only)
    @GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<List<Movie>> getAllMovies() {
        List<Movie> movies = movieService.getAllMovies();
        return ResponseEntity.ok(movies);
    }

    // Endpoint to add a new movie (JSON requests)
    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<Movie> addMovie(@Valid @RequestBody MovieRequest movieRequest) {
        Movie movie = new Movie();
        // id is generated by the database; do not set it from the request
        movie.setTitle(movieRequest.getTitle());
        movie.setGenre(movieRequest.getGenre());
        movie.setDirector(movieRequest.getDirector());
        movie.setDuration(movieRequest.getDuration());
        movie.setReleaseDate(movieRequest.getReleaseDate());
        try {
            if (movieRequest.getImageUrl() != null && !movieRequest.getImageUrl().trim().isEmpty()) {
                movie.setImageUrl(movieRequest.getImageUrl().trim());
            }
        } catch (Exception ignored) {}
        try {
            if (movieRequest.getPrice() != null) {
                movie.setPrice(new java.math.BigDecimal(movieRequest.getPrice()));
            }
        } catch (Exception ignored) {}
        // resolve category names to Category entities (multiple)
        if (movieRequest.getCategories() != null && !movieRequest.getCategories().isEmpty()) {
            Set<Category> cats = movieRequest.getCategories().stream()
                    .filter(n -> n != null && !n.trim().isEmpty())
                    .map(String::trim)
                    .map(name -> {
                        Category c = categoryService.findByName(name);
                        if (c == null) c = categoryService.addCategory(name);
                        return c;
                    })
                    .filter(c -> c != null)
                    .collect(Collectors.toCollection(HashSet::new));
            movie.setCategories(cats);
        }
        Movie savedMovie = movieService.addMovie(movie);
        return ResponseEntity.status(HttpStatus.CREATED).body(savedMovie);
    }

    // Endpoint to add a new movie (form submissions: application/x-www-form-urlencoded)
    @PostMapping(consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)
    public ResponseEntity<Void> addMovieForm(@Valid @ModelAttribute MovieRequest movieRequest) {
        Movie movie = new Movie();
        // id is generated by the database; do not set it from the form
        movie.setTitle(movieRequest.getTitle());
        movie.setGenre(movieRequest.getGenre());
        movie.setDirector(movieRequest.getDirector());
        movie.setDuration(movieRequest.getDuration());
        movie.setReleaseDate(movieRequest.getReleaseDate());
        // handle multiple categories from form
        if (movieRequest.getCategories() != null && !movieRequest.getCategories().isEmpty()) {
            Set<Category> cats = movieRequest.getCategories().stream()
                    .filter(n -> n != null && !n.trim().isEmpty())
                    .map(String::trim)
                    .map(name -> {
                        Category c = categoryService.findByName(name);
                        if (c == null) c = categoryService.addCategory(name);
                        return c;
                    })
                    .filter(c -> c != null)
                    .collect(Collectors.toCollection(HashSet::new));
            movie.setCategories(cats);
        }
        Movie savedMovie = movieService.addMovie(movie);
        // Redirect to a page that shows the saved movie and a success label
        URI redirectUri = URI.create("/admin/movies/movie-added?id=" + savedMovie.getId());
        return ResponseEntity.status(HttpStatus.SEE_OTHER).location(redirectUri).build();
    }

    // Page that shows the saved movie details with a success label
    @GetMapping(value = "/movie-added", produces = MediaType.TEXT_HTML_VALUE)
    public ResponseEntity<String> showMovieAdded(@RequestParam("id") Long id) {
        Optional<Movie> opt = movieService.getMovieById(id);
        if (opt.isEmpty()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body("<html><body><h1>Movie not found</h1></body></html>");
        }
        Movie m = opt.get();
        String cats = m.getCategories() != null ? m.getCategories().stream().map(Category::getName).collect(Collectors.joining(", ")) : "";
        String html = "<!doctype html>"
                + "<html><head><meta charset=\"utf-8\"><title>Movie Added</title>"
                + "<style>body{font-family:Arial,Helvetica,sans-serif;background:#f7f7f7;padding:20px} .card{background:#fff;padding:16px;border-radius:8px;max-width:600px;margin:0 auto;box-shadow:0 2px 8px rgba(0,0,0,0.08)} h1{color:#16a34a}</style>"
                + "</head><body>"
                + "<div class=\"card\">"
                + "<h1>Movie added successfully</h1>"
                + "<p><strong>Title:</strong> " + escapeHtml(m.getTitle()) + "</p>"
                + "<p><strong>Genre:</strong> " + escapeHtml(m.getGenre()) + "</p>"
                + "<p><strong>Director:</strong> " + escapeHtml(m.getDirector()) + "</p>"
                + "<p><strong>Duration:</strong> " + (m.getDuration() != null ? m.getDuration() + " minutes" : "") + "</p>"
                + "<p><strong>Release Date:</strong> " + escapeHtml(m.getReleaseDate()) + "</p>"
                + "<p><strong>Categories:</strong> " + escapeHtml(cats) + "</p>"
                + "<div style=\"margin-top:16px\"><a href=\"/admin-dashbaord\">Back to dashboard</a></div>"
                + "</div></body></html>";
        return ResponseEntity.ok(html);
    }

    // GET edit page: returns a simple HTML form prefilled for the movie
    @GetMapping(value = "/edit/{id}", produces = MediaType.TEXT_HTML_VALUE)
    public ResponseEntity<String> editMovieForm(@PathVariable Long id) {
        Optional<Movie> opt = movieService.getMovieById(id);
        if (opt.isEmpty()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body("<html><body><h1>Movie not found</h1></body></html>");
        }
        Movie m = opt.get();
        // Build checkbox list for categories and mark those already assigned
        List<String> allCategories = categoryService.findAllNames();
        Set<String> assigned = m.getCategories() != null ? m.getCategories().stream().map(Category::getName).collect(Collectors.toSet()) : Set.of();
        StringBuilder checkboxes = new StringBuilder();
        for (String catName : allCategories) {
            boolean checked = assigned.contains(catName);
            checkboxes.append("<label style=\"display:inline-block;margin-right:8px;margin-bottom:6px;background:#0b1220;padding:6px;border-radius:6px;border:1px solid #334155;\">")
                    .append("<input type=\"checkbox\" name=\"categories\" value=\"")
                    .append(escapeHtml(catName))
                    .append("\"")
                    .append(checked ? " checked" : "")
                    .append(" /> ")
                    .append("<span style=\"margin-left:6px;color:#fff\">")
                    .append(escapeHtml(catName))
                    .append("</span>")
                    .append("</label>");
        }

        String html = "<!doctype html>"
                + "<html lang=\"en\">"
                + "<head>"
                + "<meta charset=\"utf-8\">"
                + "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">"
                + "<title>Edit Movie - MovieMate</title>"
                + "<script src=\"https://cdn.tailwindcss.com\"></script>"
                + "<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\">"
                + "<style>body{font-family:Inter,ui-sans-serif,system-ui, -apple-system, 'Segoe UI', Roboto, 'Helvetica Neue', Arial; background:linear-gradient(135deg,#0f0f23 0%, #1a1a2e 100%);}</style>"
                + "</head><body class=\"min-h-screen text-white flex items-start justify-center pt-24 px-4\">"
                + "<div class=\"max-w-3xl w-full\">"
                + "<div class=\"bg-gray-900/50 backdrop-blur-sm border border-gray-800/50 rounded-xl p-8\">"
                + "<div class=\"text-center mb-6\">"
                + "<div class=\"w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4 bg-gradient-to-r from-red-600 to-red-800 shadow-lg\">"
                + "<i class=\"fas fa-edit text-2xl\"></i>"
                + "</div>"
                + "<h1 class=\"text-3xl font-bold\">Edit Movie</h1>"
                + "<p class=\"text-gray-400\">Update movie details and categories.</p>"
                + "</div>"
                + "<form id=\"editMovieForm\" method=\"POST\" action=\"/admin/movies/edit/" + m.getId() + "\" class=\"space-y-4\">"
                + "<div>" 
                + "<label class=\"block text-sm font-medium text-gray-300 mb-1\">Title</label>"
                + "<input name=\"title\" value=\"" + escapeHtml(m.getTitle()) + "\" required class=\"w-full px-4 py-2 bg-gray-800 border border-gray-700 rounded-lg focus:outline-none focus:border-red-500\"/>"
                + "</div>"
                + "<div>"
                + "<label class=\"block text-sm font-medium text-gray-300 mb-1\">Genre</label>"
                + "<input name=\"genre\" value=\"" + escapeHtml(m.getGenre()) + "\" required class=\"w-full px-4 py-2 bg-gray-800 border border-gray-700 rounded-lg focus:outline-none focus:border-red-500\"/>"
                + "</div>"
                + "<div>"
                + "<label class=\"block text-sm font-medium text-gray-300 mb-1\">Director</label>"
                + "<input name=\"director\" value=\"" + escapeHtml(m.getDirector()) + "\" required class=\"w-full px-4 py-2 bg-gray-800 border border-gray-700 rounded-lg focus:outline-none focus:border-red-500\"/>"
                + "</div>"
                + "<div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">"
                + "<div>"
                + "<label class=\"block text-sm font-medium text-gray-300 mb-1\">Duration (minutes)</label>"
                + "<input type=\"number\" name=\"duration\" min=\"1\" value=\"" + (m.getDuration() != null ? m.getDuration() : "") + "\" required class=\"w-full px-4 py-2 bg-gray-800 border border-gray-700 rounded-lg focus:outline-none focus:border-red-500\"/>"
                + "</div>"
                + "<div>"
                + "<label class=\"block text-sm font-medium text-gray-300 mb-1\">Release Date</label>"
                + "<input type=\"date\" name=\"releaseDate\" value=\"" + escapeHtml(m.getReleaseDate()) + "\" required class=\"w-full px-4 py-2 bg-gray-800 border border-gray-700 rounded-lg focus:outline-none focus:border-red-500\"/>"
                + "</div>"
                + "</div>"
                + "<div>"
                + "<label class=\"block text-sm font-medium text-gray-300 mb-2\">Categories</label>"
                + "<div class=\"flex flex-wrap gap-2\">" + checkboxes.toString() + "</div>"
                + "</div>"
                + "<div class=\"flex items-center justify-between mt-6\">"
                + "<div class=\"flex gap-3\">"
                + "<button type=\"submit\" class=\"bg-blue-600 hover:bg-blue-700 px-5 py-2 rounded-lg font-medium text-white\">Save</button>"
                + "<a href=\"/admin/view-added-movies\" class=\"px-5 py-2 rounded-lg bg-gray-700 hover:bg-gray-600\">Cancel</a>"
                + "</div>"
                + "</div>"
                + "</form>"
                + "</div></div></body></html>";
        return ResponseEntity.ok(html);
    }

    // POST edit handler (form submission)
    @PostMapping(value = "/edit/{id}", consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)
    public ResponseEntity<Void> editMovieSubmit(@PathVariable Long id, @ModelAttribute MovieRequest movieRequest) {
        Optional<Movie> existing = movieService.getMovieById(id);
        if (existing.isPresent()) {
            // debug log incoming values
            System.out.println("[DEBUG] editMovieSubmit payload for id=" + id + ": title='" + movieRequest.getTitle() + "', genre='" + movieRequest.getGenre() + "', director='" + movieRequest.getDirector() + "', duration='" + movieRequest.getDuration() + "', releaseDate='" + movieRequest.getReleaseDate() + "'");

            Movie movie = existing.get();
            movie.setTitle(movieRequest.getTitle());
            movie.setGenre(movieRequest.getGenre());
            movie.setDirector(movieRequest.getDirector());
            movie.setDuration(movieRequest.getDuration());
            movie.setReleaseDate(movieRequest.getReleaseDate());
            // resolve multiple category names for edits
            if (movieRequest.getCategories() != null) {
                Set<Category> cats = movieRequest.getCategories().stream()
                        .filter(n -> n != null && !n.trim().isEmpty())
                        .map(String::trim)
                        .map(name -> {
                            Category c = categoryService.findByName(name);
                            if (c == null) c = categoryService.addCategory(name);
                            return c;
                        })
                        .filter(c -> c != null)
                        .collect(Collectors.toCollection(HashSet::new));
                movie.setCategories(cats);
            } else {
                movie.setCategories(new HashSet<>());
            }
            // Use updateMovie to ensure repository update semantics
            try {
                Movie saved = movieService.updateMovie(id, movie);
                System.out.println("[DEBUG] movie updated id=" + saved.getId() + " title='" + saved.getTitle() + "'");
            } catch (RuntimeException ex) {
                System.out.println("[WARN] update failed for id=" + id + ": " + ex.getMessage());
            }
        } else {
            System.out.println("[WARN] editMovieSubmit could not find movie id=" + id);
        }
        URI redirect = URI.create("/admin/view-added-movies");
        return ResponseEntity.status(HttpStatus.SEE_OTHER).location(redirect).build();
    }

    // GET delete handler (performs delete then redirects to movies list)
    @GetMapping("/delete/{id}")
    public ResponseEntity<Void> deleteMovie(@PathVariable Long id) {
        try {
            movieService.deleteMovie(id);
        } catch (Exception ignored) {}
        URI redirect = URI.create("/admin/view-added-movies");
        return ResponseEntity.status(HttpStatus.SEE_OTHER).location(redirect).build();
    }

    // Temporary debug endpoint: echo JSON-submitted movie values as HTML
    @PostMapping(value = "/echo", consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<String> echoJson(@RequestBody MovieRequest req) {
        String cats = req.getCategories() != null ? String.join(", ", req.getCategories()) : "";
        String html = "<!doctype html><html><head><meta charset=\"utf-8\"><title>Echo (JSON)</title>"
                + "<style>body{font-family:Arial,Helvetica,sans-serif;background:#0f1724;color:#fff;padding:20px} .card{background:#0b1220;padding:20px;border-radius:8px;max-width:700px;margin:0 auto}</style>"
                + "</head><body><div class=\"card\">"
                + "<h1>Temporary Echo (JSON)</h1>"
                + "<p><strong>Title:</strong> " + escapeHtml(req.getTitle()) + "</p>"
                + "<p><strong>Genre:</strong> " + escapeHtml(req.getGenre()) + "</p>"
                + "<p><strong>Director:</strong> " + escapeHtml(req.getDirector()) + "</p>"
                + "<p><strong>Duration:</strong> " + (req.getDuration() != null ? req.getDuration() + " minutes" : "") + "</p>"
                + "<p><strong>Release Date:</strong> " + escapeHtml(req.getReleaseDate()) + "</p>"
                + "<p><strong>Categories:</strong> " + escapeHtml(cats) + "</p>"
                + "<div style=\"margin-top:12px\"><a href=\"/admin/view-added-movies\">Back to Movies</a></div>"
                + "</div></body></html>";
        return ResponseEntity.ok(html);
    }

    // Temporary debug endpoint: echo form-submitted movie values as HTML
    @PostMapping(value = "/echo-form", consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)
    public ResponseEntity<String> echoForm(@ModelAttribute MovieRequest req) {
        String cats = req.getCategories() != null ? String.join(", ", req.getCategories()) : "";
        String html = "<!doctype html><html><head><meta charset=\"utf-8\"><title>Echo (Form)</title>"
                + "<style>body{font-family:Arial,Helvetica,sans-serif;background:#0f1724;color:#fff;padding:20px} .card{background:#0b1220;padding:20px;border-radius:8px;max-width:700px;margin:0 auto}</style>"
                + "</head><body><div class=\"card\">"
                + "<h1>Temporary Echo (Form)</h1>"
                + "<p><strong>Title:</strong> " + escapeHtml(req.getTitle()) + "</p>"
                + "<p><strong>Genre:</strong> " + escapeHtml(req.getGenre()) + "</p>"
                + "<p><strong>Director:</strong> " + escapeHtml(req.getDirector()) + "</p>"
                + "<p><strong>Duration:</strong> " + (req.getDuration() != null ? req.getDuration() + " minutes" : "") + "</p>"
                + "<p><strong>Release Date:</strong> " + escapeHtml(req.getReleaseDate()) + "</p>"
                + "<p><strong>Categories:</strong> " + escapeHtml(cats) + "</p>"
                + "<div style=\"margin-top:12px\"><a href=\"/admin/view-added-movies\">Back to Movies</a></div>"
                + "</div></body></html>";
        return ResponseEntity.ok(html);
    }

    // simple HTML escaper to avoid XSS when inserting values into the page
    private String escapeHtml(String s) {
        if (s == null) return "";
        return s.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")
                .replace("\"", "&quot;").replace("'", "&#x27;");
    }

    // DTO for movie request validation
    // Inside MovieController class - update MovieRequest DTO
    public static class MovieRequest {

        @NotBlank
        private String title;

        @NotBlank
        private String genre;

        @NotBlank
        private String director;

        @NotNull
        private Integer duration;

        @NotBlank
        private String releaseDate;

        // support multiple categories
        private List<String> categories;

        private String imageUrl;

        private String price; // string to allow JSON or form, parsed later

        // Getters and Setters
        public String getTitle() {
            return title;
        }

        public void setTitle(String title) {
            this.title = title;
        }

        public String getGenre() {
            return genre;
        }

        public void setGenre(String genre) {
            this.genre = genre;
        }

        public String getDirector() {
            return director;
        }

        public void setDirector(String director) {
            this.director = director;
        }

        public Integer getDuration() {
            return duration;
        }

        public void setDuration(Integer duration) {
            this.duration = duration;
        }

        public String getReleaseDate() {
            return releaseDate;
        }

        public void setReleaseDate(String releaseDate) {
            this.releaseDate = releaseDate;
        }

        public List<String> getCategories() {
            return categories;
        }

        public void setCategories(List<String> categories) {
            this.categories = categories;
        }

        public String getImageUrl() {
            return imageUrl;
        }

        public void setImageUrl(String imageUrl) {
            this.imageUrl = imageUrl;
        }

        public String getPrice() {
            return price;
        }

        public void setPrice(String price) {
            this.price = price;
        }
    }
}